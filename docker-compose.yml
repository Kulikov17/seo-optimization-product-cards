version: "3.9"
services:
  telegram:
    image: telegram:0.0.1
    build: ./telegram
    environment:
      TG_TOKEN: ${TG_TOKEN}
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
    depends_on:
      - backend
    networks:
      - seo-network

  backend:
    image: backend:0.0.1
    build: ./backend
    environment:
      TG_TOKEN: ${TG_TOKEN}
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
    ports:
      - 8000:8000
    healthcheck:
      test: ["CMD-SHELL", "curl http://0.0.0.0:8000/"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 10s
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - seo-network

  postgres:
    container_name: postgres_container
    image: postgres:16.1-alpine3.18
    environment:
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      PGDATA: "/var/lib/postgresql/data/pgdata"
    volumes:
      - ./migrations:/docker-entrypoint-initdb.d
      - seo-product-cards-db-data:/var/lib/postgresql/data
    ports:
      - 5432:5432
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U kulikov -d seo-product-cards"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 10s
    restart: unless-stopped
    deploy:
      resources:
        limits:
          cpus: '1'
          memory: 4G
    networks:
      - seo-network

  pgadmin:
    container_name: pgadmin_container
    image: dpage/pgadmin4:8.4
    environment:
      PGADMIN_DEFAULT_EMAIL: ${PGADMIN_DEFAULT_EMAIL}
      PGADMIN_DEFAULT_PASSWORD: ${PGADMIN_DEFAULT_PASSWORD}
      PGADMIN_CONFIG_SERVER_MODE: "False"
    volumes:
      - pgadmin-data:/var/lib/pgadmin
    ports:
      - 5050:80
    restart: unless-stopped
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 1G
    networks:
      - seo-network

  rabbitmq:
    container_name: rabbitmq
    image: rabbitmq:3.13-management
    ports:
      - 5672:5672
      - 15672:15672
    healthcheck:
      test: ["CMD-SHELL", "rabbitmq-diagnostics -q ping"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 10s
    networks:
      - seo-network

  celery-worker:
    container_name: celery-worker
    build: ./backend
    environment:
      TG_TOKEN: ${TG_TOKEN}
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
    command: poetry run celery -A src.main.celery worker -l info -Q model --concurrency=1 -P threads
    volumes:
      - celery_data:/app
    depends_on:
      backend:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
    healthcheck:
      test: poetry run celery -b amqp://guest:guest@rabbitmq:5672 inspect ping
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 10s
    networks:
      - seo-network

  flower:
    container_name: flower
    build: ./backend
    command: poetry run celery -A src.main.celery flower --port=5555
    ports:
      - 5555:5555
    depends_on:
      celery-worker:
        condition: service_healthy
    networks:
      - seo-network
  
  nginx:
    container_name: seo-product-server
    image: nginx:latest
    volumes:
      - ./configs/nginx.conf:/etc/nginx/nginx.conf
      - ./static:/static
    ports:
      - 80:80
    depends_on:
      celery-worker:
        condition: service_healthy
    networks:
      - seo-network

volumes:
  seo-product-cards-db-data:
  pgadmin-data:
  celery_data:

networks:
  seo-network:
    driver: bridge
